# EP - Design de Software
# Equipe: Rafael Pascarelli Niccheri
# Data: 29/09/2020

import random
import time
import math
class Jogador():                            #Cria jogador para conseguir implemantar as rehras avançadas
    def __init__(self):
        self.valor_aposta=0                 #qunatidade de fichas que o jogador aposta
        self.escolha_aposta=0               #em quem o jogadpr aposta
        self.cartas_jogador=[]              #cartas do jogador
    
    def aposta(self, valor, escolha):       #definir as apostas do jogador
        self.valor_aposta=valor
        self.escolha_aposta=escolha
        
    def adiciona_carta(self, carta):        #adiciona uma cata na mão do jogador
        self.cartas_jogador.append(carta)
        
    def soma_cartas(self):
        cartas={'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, '10':0, 'J':0,'Q':0,'K':0}     #valores de cada carta
        soma=0                              #soma dos cartas
        for carta in self.cartas_jogador:   #verifica as cartas
            soma+=cartas[carta]             #atualiza a soma
        while soma >= 10:                   #verifica a soma
            soma-=10
        return soma

class Baralho():                            #cria os baralhos
    def __init__(self, num_baralho):
        self.num_baralho=num_baralho        #quantos baralhos serao usados
        self.numeros=['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] * num_baralho            #cria as cartas
        self.naips=['Espadas', 'Paus', 'Ouros', 'Copas'] * len(self.numeros)        #cria os naips
        self.cartas_sorteadas=[]                        #cartas ja sorteadas
    
    def sorteia_carta(self):                                                    #sorteia cartas
        numero_sorteado=random.choice(self.numeros)                             #sorteia o valor da carta
        naip_sorteado=random.choice(self.naips)                                 #sorteia o naip da carta
        carta_sorteada=[numero_sorteado, naip_sorteado]                         #cria a carta
        if self.cartas_sorteadas.count(carta_sorteada) >= self.num_baralho:     #loop para verificar se a carta ainda esta no baralho
            return self.sorteia_carta()                                         #caso a carta nao esteja mais no baralho sorteia uma carta nova
        else:
            self.cartas_sorteadas.append(carta_sorteada)                        #adiciona a carta sorteada nas cartas ja sorteadas
            return carta_sorteada                                               #retorna a carta sorteada

